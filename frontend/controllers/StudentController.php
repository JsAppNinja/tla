<?php

namespace frontend\controllers;

use common\models\Chat;
use common\models\Examtype;
use common\models\Quize;
use common\models\Quizpractice;
use common\models\Student;
use common\models\SystemSetting;
use common\models\Tutor;
use common\models\TutorStudent;
use Exception;
use frontend\components\Helpers\MixPanelHelper;
use yii;
use yii\filters\VerbFilter;
use yii\helpers\Url;
use yii\web\Controller;

class StudentController extends Controller
{
    public $layout = 'student';
    public $user;

    public function actionIndex()
    {
        return $this->render('index');
    }

    public function behaviors()
    {
        return [
            'CheckDeactivated' => [
                'class' => 'common\behaviors\CheckDeactivated',
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'finish-practice' => ['post']
                ]
            ]
        ];
    }

    public function actions()
    {
        return parent::actions(); // TODO: Change the autogenerated stub
    }


    public function init()
    {
        if (!Yii::$app->user->identity) {
            return $this->goHome();
        }

        if (isset(Yii::$app->user->identity->subscription)) {
            Yii::$app->user->identity->subscription->checkSubscription(true);
        }

        $this->user = Yii::$app->user->identity;

        parent::init(); // TODO: Change the autogenerated stub
    }

    public function actionDeactivated() {
        $this->layout = 'tutor_unsubscribe';
        return $this->render('deactivated');
    }

    public function actionStartPractice($quiz_id, $timer = true, $topic = null, $subtopic = null, $qn = null)
    {
        $user = Yii::$app->getUser();
        $examtype = Quize::findOne($quiz_id)->subject->examtype;


        if (SystemSetting::payment_enabled() && !$examtype->isFree() && !Yii::$app->user->identity->isSubscribed() && ($examtype->type != Examtype::GRADE_LEVEL)) {
            return $this->redirect(Url::toRoute('/subscription/buy'));
        }
        $qa = Quizpractice::findOne(['quiz_id' => $quiz_id, 'student_id' => $user->id]);
        if ($qa) {
            $mp = new MixPanelHelper(Yii::$app->user->identity);
            $mp->track('Start quiz again');
        }
        $quizpractice = Quizpractice::findOne(['quiz_id' => $quiz_id, 'student_id' => $user->id, 'status' => Quizpractice::IN_PROCESS]);
        if (!$quizpractice) {
            $quizpractice = new Quizpractice;
            $quizpractice->quiz_id = $quiz_id;
            $quizpractice->student_id = $user->id;
            $quizpractice->start_practice = time();
            $quizpractice->timer = $timer;
            $quizpractice->topic_id = $topic;
            $quizpractice->subtopic_id = $subtopic;
            $quizpractice->qn = $qn;
            $quizpractice->status = Quizpractice::IN_PROCESS;
            try {
                $quizpractice->save();
            } catch (Exception $e) {
                return false;
            }
        }
        $mp = new MixPanelHelper(Yii::$app->user->identity);
        $mp->track('Start practice');
        return $this->render('practiceExam/practice', compact('quizpractice'));
    }

    public function actionStartTutorPractice($quiz_id)
    {
        $user = Yii::$app->getUser();
        $grade_level = Quize::findOne($quiz_id)->subject->examtype;

        $tutor = Tutor::findOne(['user_id' => $grade_level->user_id]);

        $this->view->params['title'] = "Student practice";
        $quizpractice = Quizpractice::findOne(['quiz_id' => $quiz_id, 'student_id' => $user->id, 'status' => Quizpractice::IN_PROCESS]);
        if (!$quizpractice) {
            $quizpractice = new Quizpractice;
            $quizpractice->quiz_id = $quiz_id;
            $quizpractice->student_id = $user->id;
            $quizpractice->start_practice = time();
            $quizpractice->timer = true;
            $quizpractice->topic_id = null;
            $quizpractice->subtopic_id = null;
            $quizpractice->qn = null;
            $quizpractice->status = Quizpractice::IN_PROCESS;

            $quizpractice->save();
        }

        $this->view->params['breadcrumbs'] = [
            ['label' => 'Student dashboard', 'url' => '/student/dashboard'],
            ['label' => $tutor->getFullName(), 'url' => '/student/dashboard/' . $tutor->id],
            ['label' => $quizpractice->quiz->name]
        ];

        return $this->render('tutorPractice', compact('quizpractice', 'grade_level', 'tutor'));
    }

    public function actionFinishPractice()
    {
        $request = Yii::$app->getRequest()->getBodyParams();
        $quizpractice = Quizpractice::findOne(['id' => $request['quizpractice_id']]);
        $quizpractice->answers = json_decode($quizpractice->answers, true);
        $result = Quizpractice::checkAnswers($quizpractice->answers, $quizpractice->quiz->questions);
        $quizpractice->answers = json_encode($quizpractice->answers);
        $quizpractice->status = Quizpractice::FINISHED;
        if ($request['from_list']) {
            $quizpractice->viewed = false;
        } else {
            $quizpractice->viewed = true;
        }
        $quizpractice->date_of_exam = time();

        $quizpractice->percentage = ceil($result['correct'] / count($result['checkedAnswers']) * 100);
        $backUrl = [
            'url' => Url::toRoute('student/practice-exam'),
            'text' => 'Back to quizzes list'
        ];
        if (isset($request['tutor_id'])) {
            $tutor = Tutor::findOne($request['tutor_id']);
            $this->view->params['breadcrumbs'] = [
                ['label' => 'Student dashboard', 'url' => '/student/dashboard'],
                ['label' => $tutor->getFullName(), 'url' => '/student/dashboard/' . $tutor->id],
                ['label' => $quizpractice->quiz->name],
                ['label' => 'Result'],
            ];
        } else {
            $this->view->params['breadcrumbs'] = [
                'links' => [
                    'label' => 'Result'
                ]
            ];
        }
        if ($quizpractice->save()) {
            $mp = new MixPanelHelper(Yii::$app->user->identity);
            if ($quizpractice->viewed) {
                $mp->track('Finished practice');
                if (($result['incorrect'] + $result['correct']) / count($result['checkedAnswers']) > 0.3) {
                    $mp->track('More than 30% questions checked');
                }
                if (($result['incorrect'] + $result['correct']) / count($result['checkedAnswers']) > 0.6) {
                    $mp->track('More than 60% questions checked');
                }
            } else {
                $mp->track('Not finished practice');
            }
            return $this->render('practiceExam/result', compact('result', 'quizpractice', 'backUrl'));
        }
    }

    public function actionFinishedExamView($id)
    {
        $quizpractice = Quizpractice::findOne(['id' => $id, 'student_id' => Yii::$app->user->identity->id]);
        $quizpractice->viewed = true;
        $a = $quizpractice->save();
        $quizpractice->answers = json_decode($quizpractice->answers, true);
        $result = Quizpractice::checkAnswers($quizpractice->answers, $quizpractice->quiz->questions);
        $backUrl = [
            'url' => Url::toRoute('finished-quizzes'),
            'text' => 'Back to finished quizzes list'
        ];
        $this->view->params['breadcrumbs'] = [
            'links' => [
                'label' => 'Finished quiz result'
            ]
        ];
        $mp = new MixPanelHelper(Yii::$app->user->identity);
        $mp->track('Open finished quiz result');

        return $this->render('practiceExam/result', compact('result', 'quizpractice', 'backUrl'));
    }

    public function actionPracticeExam()
    {
        $this->view->params['title'] = "Practice exam";
        $this->view->params['breadcrumbs'] = [
            'links' => [
                'label' => 'Practice exam'
            ]
        ];
        $subscribed = Yii::$app->user->identity->isSubscribed();

        return $this->render('practiceExam/index', compact('subscribed'));
    }

    public function actionFinishedQuizzes()
    {
        $this->view->params['title'] = "Finished quizzes";
        $this->view->params['breadcrumbs'] = [
            'links' => [
                'label' => 'Finished quizzes'
            ]
        ];
        return $this->render('finished-quizzes');
    }

    public function actionAccountSettings()
    {
        $this->view->params['title'] = "Account settings";
        $this->view->params['breadcrumbs'] = [
            'links' => [
                'label' => 'Account settings'
            ]
        ];
        return $this->render('account-settings');
    }

    public function actionSearch()
    {
        $this->view->params['title'] = "Search for tutors";
        $this->view->params['breadcrumbs'] = [
            'links' => [
                'label' => 'Search for tutors'
            ]
        ];

        $mp = new MixPanelHelper(Yii::$app->user->identity);
        $mp->track('Open search tutor page');

        return $this->render('search');
    }

    public function actionDashboard()
    {
        $this->view->params['title'] = "Student dashboard";
        $this->view->params['breadcrumbs'] = [
            'links' => [
                'label' => 'Student dashboard'
            ]
        ];

        $student = Student::findOne(['user_id' => Yii::$app->user->identity->id]);
        $studentTutors = $student->tutorStudents;

        return $this->render('dashboard', compact('studentTutors'));
    }

    public function actionTutor($id)
    {
        $student = Student::findOne(['user_id' => Yii::$app->user->identity->id]);
        if (($tutor = Tutor::findOne($id)) && TutorStudent::find()->where(['tutor_id' => $tutor->id, 'student_id' => $student->id])->one()) {
            $this->view->params['title'] = "Student dashboard";
            $this->view->params['breadcrumbs'] = [
                ['label' => 'Student dashboard', 'url' => '/student/dashboard'],
                ['label' => $tutor->getFullName()]
            ];
            if ($tutor->announce && $tutor->announce->status) {
                $this->view->params['announce'] = $tutor->announce->text;
            }
            return $this->render('tutor', compact('tutor', 'student'));
        }

        throw new yii\web\NotFoundHttpException('Tutor not found');
    }

    public function actionChat()
    {
        $this->view->params['title'] = "Chat";
        $this->view->params['breadcrumbs'] = [
            ['label' => 'Chat'],
        ];

        return $this->render('chat');
    }

    public function actionTutorChat($id)
    {

        if($chat = Chat::findOne($id)) {
            return $this->render('tutorChat', compact('chat'));
        }

        throw new yii\web\NotFoundHttpException('Not found');
    }

    public function actionViewTutorProfile($id)
    {
        $tutor = Tutor::findOne(['id' => $id]);
        if ($tutor) {
            $this->layout = 'student';
            $mp = new MixPanelHelper(Yii::$app->user->identity);
            $mp->track('Open tutor profile');

            return $this->render('viewTutorProfile', compact('tutor'));
        }
        throw new yii\web\NotFoundHttpException('Tutor not found');
    }

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = true;
        return parent::beforeAction($action);
    }
}
